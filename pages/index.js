import Head from 'next/head'
import React from "react";
import {server} from "../config";
import styles from '../styles/Home.module.css'
import {Button, Card, Form, Input, Select} from "antd";
import {DeleteOutlined, PlusOutlined} from "@ant-design/icons";
import ingredients from "./api/ingredients";

export default function Home({recipes, ingredients, measurements}) {

  const onFinish =  (data) => {
    fetch(`${server}/api/recipes`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    }).then(res => {console.log(res)}).catch(err => console.error(err))
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {recipes.map(r => <Card key={r.id} title={`${r.name} (${r.recipe_code})`}>
        {r.recipe_ingredients.map(i => <p key={i.id}>{`${i.ingredients.name} ${i.measurement} ${i.measurements.name}`}</p>)}
      </Card>)}
      <h2>Create a new recipe</h2>
      <Form onFinish={onFinish}>
        <Form.Item name={'title'} label={'Title'}>
        <Input/>
        </Form.Item>
        <Form.Item name={'recipe_code'} label={'Recipe Lookup Code'}>
          <Input/>
        </Form.Item>
        <Form.List name={'ingredients'} >
          {(fields, {add, remove}, {errors}) => (
            <React.Fragment key={0}>
              {fields.map((field, index) => (
                <Form.Item  {...field} key={field.key} style={{marginBottom: 0, backgroundColor: 'aliceBlue', padding: 5}}>
                  <Input.Group compact>
                    <Form.Item style={{width: '20vw', marginRight: 10}}
                               key={`${field.key}-ingredient`}
                               name={[field.name, `ingredient_name`]}
                               label={'Ingredient'}>
                      <Select style={{width: '100%'}}>
                        {ingredients.map(i => <Select.Option key={i.id} value={i.id}>{i.name}</Select.Option>)}
                        <Select.Option key={'other'} value={'other'}/>
                      </Select>
                    </Form.Item>
                    <Form.Item
                      noStyle
                      shouldUpdate={(prevValues, currentValues) => {
                        const prevIngredient = prevValues.ingredients[index] !== undefined ?
                          prevValues.ingredients[index][`ingredient_name`] : undefined
                        const currentIngredient = currentValues.ingredients[index] ?
                          currentValues.ingredients[index][`ingredient_name`] : undefined

                        if (currentIngredient === undefined) return false
                        return prevIngredient !== currentIngredient
                      }}
                    >
                      {({getFieldValue}) => {
                        const ingredients = getFieldValue(`ingredients`)
                        if (!ingredients[index]) return null
                        const ingredient = ingredients[index][`ingredient_name`]

                        return ingredient === 'other' ? (
                          <Form.Item style={{width: '20vw', marginRight: 10}}
                                     name={[field.name, `custom_ingredient_name`]} label="Custom">
                            <Input style={{width: '100%'}}/>
                          </Form.Item>
                        ) : null
                      }
                      }
                    </Form.Item>
                    <Form.Item style={{width: '10vw', marginRight: 10}}
                               key={`${field.key}-measurement`}
                               name={[field.name, `measurement`]}
                               label={'Quantity'}>
                      <Input style={{width: '100%'}} type={'number'}/>
                    </Form.Item>
                    <Form.Item style={{width: '20vw', marginRight: 10}}
                               key={`${field.key}-measurement-type`}
                               name={[field.name, `measurement_type`]}
                               label={'Unit'}>
                      <Select style={{width: '100%'}}>
                        {measurements.map(i => <Select.Option key={i.id} value={i.id}>{i.name}</Select.Option>)}
                      </Select>
                    </Form.Item>
                    <Form.Item style={{width: '20vw', marginRight: 10}} label={'Remove'}>
                      <Button
                        type="primary" danger ghost
                        onClick={() => remove(index)}
                        style={{width: '100%'}}
                        icon={<DeleteOutlined/>}
                      />

                    </Form.Item>
                  </Input.Group>

                </Form.Item>
              ))}
              <Form.Item>
                <Button
                  type="dashed"
                  onClick={() => add()}
                  style={{width: '100%'}}
                  icon={<PlusOutlined/>}
                >
                  Add field
                </Button>
              </Form.Item>
            </React.Fragment>
          )}
        </Form.List>
        <Form.Item>
          <Button type="primary" htmlType="submit">Submit</Button>
        </Form.Item>
      </Form>
    </div>
  )
}

const createRecipe = async () => {
  await fetch(`${server}/api/recipes`, {
    method: 'POST'
  }).then(data => console.log(data))
    .catch(err => console.error(err))
}

export const getStaticProps = async () => {
  const resRecipes = await fetch(`${server}/api/recipes`)
  const recipes = await resRecipes.json()

  const resIngredients = await fetch(`${server}/api/ingredients`)
  const ingredients = await resIngredients.json()

  const resMeasurements = await fetch(`${server}/api/measurements`)
  const measurements = await resMeasurements.json()

  return {
    props: {
      recipes,
      ingredients,
      measurements
    }
  }
};
